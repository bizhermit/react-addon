"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.convertToTsCode=void 0;const string_utils_1=__importDefault(require("@bizhermit/basic-utils/dist/string-utils")),code_1=require("../../elements/code"),convertToTsCode=e=>{let s=[];return s=string_utils_1.default.isString(e)?e.split(/\r\n|\n/):[...e],s.join("\n").replace(/ /g,"&nbsp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/(\')(.*)(\')/g,`<span class="${code_1.codeCn}-string">$1$2$3</span>`).replace(/(\")(.*)(\")/g,`<span class="${code_1.codeCn}-string">$1$2$3</span>`).replace(/(\/\/.*)(\n)/g,`<span class="${code_1.codeCn}-comment">$1</span>$2`).replace(/(\/*.*\*\/)/g,`<span class="${code_1.codeCn}-comment">$1</span>`).replace(/(import(.*)&nbsp;)(from)(&nbsp;)/g,`$1<span class="${code_1.codeCn}-import">$3</span>$4`).replace(/(import)(&nbsp;)/g,`<span class="${code_1.codeCn}-import">$1</span>$2`).replace(/(export&nbsp;default|export)(&nbsp;)/g,`<span class="${code_1.codeCn}-export">$1</span>$2`).replace(/(return)(&nbsp;|;)/g,`<span class="${code_1.codeCn}-return">$1</span>$2`).replace(/(const|let|var)(&nbsp;)/g,`<span class="${code_1.codeCn}-var">$1</span>$2`).split("\n")};exports.convertToTsCode=convertToTsCode;